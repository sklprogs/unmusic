#!/usr/bin/python3
# -*- coding: UTF-8 -*-

import os
import sqlite3
from skl_shared.localize import _
import skl_shared.shared as sh
import skl_shared.image.controller as im
import logic as lg
import gui as gi


class DeleteBad:
    
    def __init__(self):
        self.Success = True
        # Generated with tests.BadRating.report
        self.ids = ['3', '7', '45', '46', '47', '48', '50', '51', '130', '136', '147', '153', '175', '247', '249', '253', '296', '299', '505', '506', '509', '543', '544', '545', '546', '547', '548', '549', '550', '551', '554', '555', '556', '557', '563', '564', '565', '566', '568', '569', '570', '571', '573', '574', '575', '576', '582', '583', '586', '587', '588', '589', '590', '592', '593', '594', '595', '596', '597', '599', '600', '601', '602', '603', '604', '605', '606', '608', '609', '610', '611', '613', '614', '615', '618', '621', '622', '623', '642', '643', '644', '645', '646', '647', '649', '650', '651', '652', '653', '656', '657', '658', '659', '660', '661', '662', '663', '664', '665', '666', '667', '668', '669', '671', '672', '673', '674', '675', '678', '680', '681', '682', '684', '685', '686', '687', '688', '690', '691', '693', '694', '695', '696', '697', '698', '700', '701', '702', '703', '704', '705', '706', '707', '709', '710', '712', '713', '714', '715', '716', '717', '719', '720', '721', '722', '723', '724', '725', '726', '727', '729', '730', '731', '732', '733', '734', '735', '736', '739', '740', '741', '742', '743', '744', '745', '746', '747', '748', '749', '750', '751', '752', '753', '754', '755', '756', '757', '758', '759', '760', '761', '762', '763', '764', '765', '766', '767', '768', '769', '770', '771', '772', '773', '774', '775', '776', '777', '778', '779', '780', '781', '782', '783', '784', '785', '786', '788', '789', '790', '791', '792', '793', '794', '796', '797', '798', '799', '800', '801', '802', '803', '805', '806', '807', '808', '809', '810', '811', '812', '814', '815', '816', '818', '819', '820', '821', '823', '824', '826', '827', '828', '829', '830', '831', '833', '834', '835', '836', '837', '838', '841', '843', '844', '845', '848', '849', '850', '851', '852', '853', '854', '855', '856', '859', '860', '861', '862', '863', '864', '866', '867', '868', '869', '870', '871', '872', '874', '875', '876', '877', '878', '879', '880', '881', '882', '883', '884', '885', '886', '887', '888', '889', '890', '891', '892', '893', '894', '896', '897', '900', '901', '903', '904', '905', '906', '907', '908', '909', '910', '912', '913', '914', '918', '919', '920', '921', '922', '923', '924', '926', '927', '928', '929', '930', '931', '932', '933', '934', '935', '936', '939', '940', '942', '943', '944', '945', '948', '950', '951', '952', '953', '954', '955', '956', '957', '958', '959', '960', '961', '962', '963', '964', '965', '967', '968', '969', '970', '971', '973', '974', '975', '977', '978', '979', '981', '982', '983', '984', '985', '986', '987', '988', '989', '990', '991', '992', '994', '995', '996', '997', '998', '999', '1000', '1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1012', '1014', '1015', '1016', '1017', '1020', '1021', '1022', '1023', '1024', '1025', '1026', '1027', '1029', '1030', '1031', '1032', '1033', '1034', '1036', '1037', '1038', '1039', '1040', '1041', '1042', '1044', '1045', '1046', '1047', '1048', '1049', '1050', '1052', '1053', '1054', '1057', '1058', '1059', '1060', '1061', '1063', '1064', '1066', '1067', '1068', '1069', '1072', '1074', '1075', '1076', '1077', '1078', '1080', '1081', '1082', '1083', '1084', '1085', '1086', '1087', '1089', '1090', '1091', '1092', '1093', '1094', '1095', '1096', '1098', '1099', '1100', '1102', '1103', '1104', '1105', '1106', '1107', '1109', '1112', '1114', '1115', '1116', '1117', '1119', '1121', '1123', '1124', '1125', '1126', '1127', '1128', '1129', '1130', '1132', '1133', '1134', '1135', '1136', '1138', '1139', '1141', '1142', '1143', '1144', '1145', '1146', '1147', '1148', '1149', '1150', '1151', '1152', '1155', '1156', '1157', '1158', '1159', '1160', '1162', '1163', '1164', '1165', '1166', '1167', '1168', '1169', '1170', '1171', '1174', '1175', '1176', '1177', '1180', '1182', '1183', '1185', '1186', '1187', '1188', '1189', '1191', '1192', '1193', '1194', '1195', '1196', '1198', '1199', '1201', '1204', '1205', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1217', '1218', '1219', '1220', '1221', '1222', '1223', '1224', '1225', '1226', '1227', '1228', '1229', '1230', '1231', '1232', '1233', '1235', '1236', '1237', '1238', '1239', '1240', '1241', '1242', '1245', '1246', '1247', '1248', '1249', '1250', '1251', '1253', '1254', '1255', '1256', '1260', '1261', '1262', '1263', '1264', '1267', '1269', '1270', '1271', '1274', '1275', '1276', '1277', '1278', '1280', '1281', '1282', '1284', '1285', '1288', '1289', '1290', '1292', '1293', '1294', '1295', '1296', '1298', '1300', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1318', '1319', '1320', '1321', '1322', '1323', '1324', '1325', '1326', '1327', '1329', '1330', '1331', '1332', '1333', '1334', '1335', '1336', '1337', '1338', '1339', '1341', '1342', '1343', '1344', '1345', '1346', '1347', '1348', '1349', '1350', '1351', '1352', '1353', '1354', '1355', '1356', '1357', '1358', '1359', '1360', '1361', '1362', '1363', '1364', '1365', '1366', '1367', '1368', '1369', '1370', '1371', '1372', '1373', '1374', '1375', '1377', '1378', '1379', '1380', '1381', '1382', '1383', '1384', '1385', '1386', '1387', '1388', '1389', '1390', '1391', '1392', '1394', '1395', '1396', '1398', '1400', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1414', '1415', '1416', '1417', '1418', '1419', '1421', '1422', '1423', '1425', '1426', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1436', '1437', '1438', '1439', '1440', '1441', '1442', '1443', '1445', '1446', '1447', '1448', '1449', '1450', '1451', '1452', '1453', '1454', '1456', '1457', '1458', '1460', '1461', '1462', '1465', '1466', '1467', '1468', '1473', '1474', '1475', '1476', '1477', '1478', '1479', '1480', '1482', '1483', '1484', '1485', '1486', '1487', '1488', '1489', '1490', '1491', '1492', '1493', '1494', '1496', '1498', '1500', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1510', '1511', '1513', '1514', '1515', '1516', '1518', '1519', '1521', '1522', '1523', '1525', '1526', '1527', '1528', '1530', '1531', '1532', '1533', '1534', '1535', '1536', '1537', '1538', '1540', '1542', '1544', '1545', '1546', '1547', '1548', '1549', '1550', '1551', '1553', '1554', '1555', '1556', '1557', '1559', '1560', '1562', '1563', '1564', '1565', '1566', '1567', '1569', '1570', '1571', '1572', '1573', '1574', '1575', '1576', '1577', '1578', '1580', '1581', '1582', '1583', '1584', '1585', '1586', '1587', '1588', '1589', '1590', '1593', '1594', '1595', '1597', '1598', '1599', '1600', '1601', '1602', '1603', '1604', '1605', '1606', '1608', '1609', '1610', '1611', '1613', '1614', '1615', '1616', '1618', '1619', '1620', '1621', '1622', '1623', '1624', '1625', '1627', '1628', '1629', '1630', '1631', '1632', '1633', '1634', '1635', '1636', '1637', '1638', '1639', '1640', '1641', '1642', '1643', '1645', '1646', '1647', '1648', '1649', '1650', '1651', '1652', '1653', '1654', '1655', '1656', '1658', '1659', '1660', '1661', '1662', '1663', '1664', '1666', '1667', '1668', '1669', '1670', '1671', '1672', '1673', '1674', '1676', '1677', '1679', '1680', '1681', '1682', '1683', '1684', '1685', '1686', '1688', '1689', '1690', '1691', '1693', '1695', '1696', '1697', '1699', '1700', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1750', '1751', '1752', '1753', '1755', '1756', '1757', '1758', '1759', '1760', '1761', '1763', '1764', '1765', '1766', '1768', '1769', '1770', '1772', '1773', '1774', '1775', '1777', '1778', '1779', '1780', '1782', '1783', '1785', '1786', '1788', '1789', '1791', '1792', '1793', '1794', '1795', '1796', '1797', '1798', '1799', '1800', '1801', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1812', '1813', '1814', '1815', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1839', '1840', '1841', '1842', '1843', '1844', '1845', '1846', '1847', '1848', '1850', '1851', '1852', '1853', '1857', '1859', '1860', '1861', '1862', '1863', '1865', '1866', '1867', '1868', '1869', '1870', '1871', '1872', '1874', '1875', '1876', '1878', '1879', '1880', '1881', '1882', '1883', '1884', '1886', '1887', '1888', '1889', '1890', '1891', '1893', '1894', '1897', '1898', '1899', '1900', '1901', '1903', '1905', '1906', '1907', '1908', '1909', '1910', '1912', '1913', '1915', '1916', '1917', '1918', '1919', '1920', '1921', '1922', '1923', '1924', '1925', '1926', '1928', '1929', '1930', '1931', '1932', '1934', '1935', '1936', '1937', '1938', '1939', '1942', '1943', '1944', '1945', '1946', '1947', '1949', '1950', '1951', '1952', '1953', '1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961', '1962', '1963', '1964', '1965', '1967', '1968', '1971', '1972', '1973', '1974', '1975', '1976', '1977', '1978', '1979', '1980', '1981', '1983', '1984', '1986', '1987', '1989', '1991', '1992', '1993', '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2005', '2006', '2007', '2008', '2009', '2010', '2012', '2013', '2014', '2015', '2017', '2018', '2019', '2020', '2023', '2024', '2025', '2026', '2027', '2028', '2029', '2030', '2031', '2033', '2034', '2036', '2037', '2038', '2039', '2040', '2041', '2042', '2044', '2046', '2049', '2050', '2051', '2054', '2055', '2056', '2057', '2058', '2059', '2061', '2062', '2063', '2064', '2065', '2066', '2067', '2068', '2069', '2070', '2072', '2073', '2075', '2076', '2077', '2078', '2080', '2081', '2082', '2083', '2084', '2085', '2086', '2087', '2088', '2089', '2090', '2091', '2092', '2093', '2094', '2095', '2097', '2098', '2099', '2100', '2101', '2102', '2103', '2104', '2105', '2107', '2108', '2109', '2110', '2111', '2112', '2114', '2115', '2116', '2117', '2118', '2119', '2120', '2121', '2122', '2124', '2126', '2127', '2128', '2130', '2132', '2133', '2135', '2137', '2139', '2140', '2141', '2142', '2143', '2144', '2145', '2146', '2147', '2149', '2150', '2152', '2154', '2155', '2156', '2157', '2159', '2160', '2161', '2162', '2164', '2165', '2166', '2167', '2168', '2169', '2170', '2172', '2174', '2175', '2176', '2177', '2178', '2179', '2180', '2182', '2183', '2184', '2185', '2186', '2187', '2189', '2190', '2191', '2192', '2193', '2195', '3060', '3061', '3062', '3063', '3065', '3066', '3069', '3071', '3072', '3073', '3075', '3076', '3077', '3079', '3080', '3083', '3084', '3086', '3087', '3088', '3089', '3090', '3091', '3092', '3095', '3096', '3097', '3098', '3100', '3102', '3103', '3105', '3107', '3108', '3109', '3110', '3111', '3112', '3113', '3114', '3117', '3118', '3119', '3120', '3121', '3122', '3125', '3126', '3127', '3128', '3129', '3130', '3132', '3134', '3136', '3137', '3139', '3140', '3142', '3145', '3147', '3148', '3149', '3150', '3151', '3152', '3153', '3154', '3155', '3156', '3157', '3158', '3159', '3160', '3161', '3162', '3163', '3164', '3165', '3166', '3167', '3168', '3169', '3172', '3173', '3175', '3176', '3177', '3179', '3180', '3182', '3183', '3184', '3185', '3186', '3188', '3189', '3191', '3192', '3195', '3196', '3197', '3199', '3200', '3201', '3203', '3204', '3206', '3207', '3208', '3209', '3210', '3211', '3212', '3213', '3214', '3215', '3218', '3220', '3221', '3222', '3223', '3224', '3226', '3228', '3229', '3230', '3231', '3232', '3234', '3235', '3236', '3237', '3238', '3240', '3243', '3244', '3246', '3247', '3248', '3249', '3250', '3251', '3253', '3254', '3257', '3258', '3259', '3262', '3263', '3264', '3265', '3266', '3267', '3269', '3271', '3273', '3275', '3276', '3277', '3278', '3280', '3282', '3283', '3284', '3285', '3287', '3291', '3293', '3294', '3295', '3296', '3297', '3298', '3300', '3302', '3303', '3304', '3305', '3306', '3307', '3309', '3312', '3313', '3314', '3315', '3316', '3317', '3319', '3320', '3321', '3322', '3323', '3324', '3325', '3326', '3327', '3328', '3329', '3330', '3332', '3333', '3334', '3335', '3336', '3337', '3338', '3340', '3341', '3343', '3344', '3345', '3346', '3347', '3350', '3351', '3352', '3353', '3355', '3356', '3358', '3359', '3361', '3362', '3365', '3367', '3368', '3369', '3370', '3371', '3372', '3373', '3374', '3375', '3377', '3378', '3379', '3380', '3381', '3382', '3383', '3384', '3385', '3387', '3389', '3390', '3392', '3393', '3394', '3395', '3396', '3398', '3399', '3400', '3401', '3402', '3403', '3404', '3405', '3406', '3409', '3410', '3411', '3412', '3413', '3414', '3415', '3416', '3417', '3418', '3420', '3421', '3422', '3423', '3426', '3427', '3428', '3429', '3430', '3431', '3434', '3436', '3438', '3439', '3442', '3443', '3445', '3446', '3447', '3448', '3450', '3451', '3452', '3453', '3454', '3455', '3456', '3457', '3458', '3460', '3462', '3463', '3464', '3465', '3466', '3468', '3469', '3470', '3471', '3472', '3473', '3474', '3475', '3476', '3477', '3478', '3480', '3481', '3482', '3483', '3484', '3485', '3486', '3487', '3488', '3489', '3490', '3492', '3494', '3495', '3496', '3497', '3498', '3499', '3501', '3504', '3505', '3506', '3509', '3511', '3514', '3515', '3516', '3517', '3518', '3519', '3520', '3521', '3522', '3523', '3524', '3525', '3526', '3528', '3529', '3530', '3531', '3532', '3533', '3534', '3536', '3537', '3538', '3539', '3540', '3541', '3545', '3546', '3547', '3548', '3549', '3550', '3552', '3553', '3554', '3555', '3556', '3557', '3558', '3559', '3560', '3563', '3564', '3566', '3567', '3568', '3569', '3571', '3574', '3575', '3576', '3577', '3579', '3580', '3581', '3582', '3584', '3585', '3586', '3587', '3588', '3592', '3594', '3595', '3596', '3597', '3598', '3599', '3600', '3601', '3604', '3605', '3606', '3607', '3609', '3610', '3611', '3613', '3614', '3615', '3616', '3618', '3619', '3620', '3621', '3622', '3623', '3624', '3625', '3626', '3627', '3628', '3629', '3631', '3632', '3634', '3636', '3637', '3638', '3639', '3640', '3642', '3643', '3644', '3645', '3646', '3647', '3648', '3649', '3650', '3651', '3652', '3654', '3655', '3656', '3658', '3659', '3660', '3661', '3662', '3663', '3664', '3665', '3668', '3669', '3670', '3672', '3674', '3675', '3676', '3677', '3678', '3679', '3680', '3681', '3682', '3685', '3686', '3687', '3689', '3690', '3691', '3692', '3693', '3694', '3695', '3696', '3697', '3698', '3699', '3700', '3701', '3704', '3705', '3706', '3707', '3709', '3710', '3711', '3713', '3715', '3717', '3719', '3720', '3721', '3722', '3723', '3724', '3725', '3726', '3729', '3731', '3733', '3734', '3735', '3738', '3740', '3742', '3743', '3745', '3746', '3748', '3749', '3750', '3751', '3752', '3753', '3754', '3756', '3758', '3759', '3760', '3761', '3762', '3763', '3765', '3766', '3767', '3768', '3769', '3771', '3772', '3773', '3774', '3776', '3777', '3779', '3781', '3783', '3784', '3785', '3786', '3787', '3788', '3789', '3790', '3792', '3794', '3796', '3798', '3799', '3801', '3802', '3804', '3805', '3807', '3812', '3813', '3814', '3816', '3817', '3820', '3821', '3822', '3823', '3824', '3825', '3827', '3828', '3830', '3831', '3832', '3833', '3834', '3836', '3837', '3838', '3839', '3840', '3841', '3842', '3843', '3847', '3848', '3849', '3850', '3851', '3852', '3853', '3854', '3855', '3856', '3857', '3858', '3859', '3860', '3861', '3863', '3865', '3866', '3867', '3868', '3869', '3870', '3871', '3872', '3874', '3876', '3877', '3878', '3879', '3880', '3881', '3882', '3883', '3884', '3885', '3886', '3887', '3889', '3890', '3891', '3892', '3893', '3895', '3896', '3897', '3899', '3901', '3902', '3903', '3904', '3905', '3906', '3907', '3908', '3909', '3910', '3911', '3915', '3916', '3919', '3921', '3922', '3924', '3925', '3926', '3927', '3928', '3929', '3930', '3931', '3932', '3933', '3934', '3935', '3937', '3938', '3939', '3940', '3941', '3942', '3943', '3944', '3945', '3946', '3947', '3950', '3951', '3954', '3955', '3956', '3959', '3961', '3963', '3964', '3965', '3966', '3967', '3968', '3969', '3970', '3971', '3973', '3974', '3975', '3976', '3978', '3980', '3981', '3982', '3983', '3984', '3985', '3986', '3987', '3988', '3989', '3990', '3991', '3992', '3994', '3995', '3996', '3997', '3998', '3999', '4001', '4003', '4006', '4007', '4008', '4009', '4010', '4012', '4013', '4014', '4015', '4016', '4018', '4019', '4020', '4021', '4022', '4023', '4024', '4025', '4026', '4027', '4028', '4029', '4030', '4034', '4036', '4038', '4039', '4041', '4042', '4043', '4044', '4045', '4046', '4047', '4048', '4049', '4050', '4051', '4053', '4054', '4055', '4058', '4059', '4062', '4065', '4066', '4067', '4069', '4070', '4071', '4074', '4075', '4076', '4077', '4078', '4079', '4081', '4083', '4085', '4087', '4089', '4090', '4092', '4093', '4095', '4096', '4098', '4100', '4101', '4103', '4104', '4105', '4106', '4107', '4108', '4110', '4112', '4113', '4115', '4116', '4117', '4119', '4121', '4122', '4124', '4125', '4126', '4127', '4128', '4129', '4130', '4132', '4134', '4135', '4136', '4138', '4139', '4140', '4141', '4142', '4143', '4144', '4145', '4146', '4147', '4148', '4149', '4150', '4153', '4154', '4155', '4156', '4157', '4158', '4159', '4162', '4163', '4164', '4165', '4166', '4167', '4168', '4169', '4170', '4171', '4173', '4175', '4176', '4177', '4178', '4180', '4181', '4182', '4183', '4184', '4185', '4186', '4187', '4188', '4189', '4190', '4191', '4192', '4193', '4194', '4195', '4196', '4197', '4199', '4200', '4202', '4203', '4204', '4205', '4206', '4207', '4208', '4209', '4211', '4212', '4213', '4214', '4215', '4216', '4217', '4218', '4219', '4220', '4221', '4222', '4224', '4225', '4226', '4227', '4229', '4231', '4232', '4233', '4235', '4236', '4238', '4239', '4240', '4242', '4243', '4246', '4248', '4249', '4250', '4252', '4253', '4254', '4255', '4256', '4257', '4258', '4260', '4261', '4263', '4264', '4265', '4266', '4267', '4268', '4269', '4271', '4272', '4274', '4275', '4276', '4277', '4278', '4279', '4280', '4281', '4282', '4284', '4285', '4286', '4287', '4288', '4289', '4290', '4292', '4294', '4295', '4296', '4297', '4298', '4300', '4301', '4302', '4303', '4304', '4305', '4306', '4308', '4309', '4311', '4312', '4313', '4314', '4315', '4316', '4317', '4318', '4319', '4320', '4321', '4324', '4325', '4327', '4328', '4329', '4330', '4332', '4333', '4334', '4335', '4336', '4337', '4339', '4342', '4343', '4344', '4345', '4346', '4348', '4349', '4350', '4351', '4352', '4353', '4354', '4356', '4358', '4359', '4360', '4362', '4364', '4365', '4366', '4368', '4369', '4371', '4372', '4373', '4375', '4376', '4377', '4378', '4379', '4380', '4381', '4382', '4385', '4386', '4387', '4388', '4392', '4393', '4394', '4395', '4397', '4398', '4399', '4401', '4402', '4404', '4405', '4406', '4407', '4408', '4410', '4411', '4412', '4414', '4417', '4420', '4421', '4422', '4423', '4424', '4427', '4428', '4429', '4430', '4431', '4432', '4433', '4437', '4438', '4439', '4440', '4441', '4442', '4443', '4444', '4445', '4446', '4447', '4449', '4450', '4451', '4452', '4453', '4455', '4456', '4457', '4459', '4461', '4462', '4463', '4464', '4465', '4466', '4467', '4468', '4469', '4470', '4471', '4472', '4473', '4474', '4476', '4477', '4478', '4480', '4481', '4482', '4483', '4484', '4485', '4486', '4487', '4489', '4490', '4491', '4492', '4493', '4494', '4495', '4496', '4497', '4498', '4499', '4500', '4501', '4502', '4503', '4504', '4505', '4506', '4507', '4509', '4512', '4513', '4515', '4516', '4517', '4518', '4519', '4520', '4521', '4527', '4528', '4529', '4530', '4531', '4532', '4534', '4535', '4537', '4538', '4539', '4540', '4541', '4542', '4543', '4544', '4545', '4546', '4547', '4548', '4549', '4550', '4551', '4552', '4553', '4554', '4555', '4558', '4559', '4560', '4561', '4562', '4563', '4565', '4566', '4567', '4569', '4570', '4572', '4574', '4575', '4579', '4580', '4583', '4584', '4585', '4586', '4587', '4588', '4589', '4590', '4591', '4593', '4594', '4595', '4596', '4597', '4598', '4599', '4601', '4602', '4604', '4605', '4608', '4610', '4611', '4612', '4613', '4614', '4615', '4617', '4619', '4620', '4621', '4622', '4623', '4624', '4626', '4627', '4629', '4630', '4633', '4635', '4636', '4637', '4638', '4639', '4640', '4643', '4644', '4645', '4646', '4651', '4652', '4653', '4654', '4655', '4656', '4657', '4661', '4662', '4663', '4664', '4665', '4666', '4667', '4669', '4670', '4671', '4672', '4673', '4674', '4675', '4676', '4677', '4678', '4679', '4681', '4683', '4684', '4685', '4686', '4687', '4689', '4690', '4691', '4692', '4693', '4696', '4698', '4699', '4700', '4701', '4702', '4703', '4705', '4706', '4707', '4710', '4711', '4712', '4713', '4714', '4715', '4716', '4717', '4718', '4721', '4723', '4724', '4726', '4727', '4729', '4730', '4731', '4799', '4947', '5000', '5015', '5197', '5332', '5369', '5404', '5497', '5505', '5515', '5664', '5829', '5954', '5976', '6006', '6013', '6022', '6062', '6068', '6179', '6250', '6290', '6300', '6308', '6389', '6400', '6410', '6420', '6453', '6468', '6505', '6560', '6564', '6706', '6713', '6791', '6817', '6892', '6997', '7044', '7045', '7053', '7148', '7159', '7197', '7259', '7353', '7354', '7355', '7356', '7357', '7358', '7359', '7360', '7361', '7362', '7363', '7364', '7365', '7366', '7367', '7368', '7369', '7370', '7371', '7372', '7373', '7375', '7376', '7377', '7379', '7380', '7381', '7382', '7383', '7384', '7385', '7386', '7387', '7388', '7389', '7390', '7391', '7392', '7393', '7394', '7395', '7396', '7397', '7398', '7399', '7400', '7401', '7402', '7403', '7404', '7405', '7406', '7407', '7408', '7409', '7410', '7411', '7412', '7413', '7414', '7415', '7416', '7417', '7418', '7419', '7420', '7421', '7422', '7423', '7424', '7425', '7426', '7429', '7430', '7431', '7432', '7434', '7435', '7436', '7437', '7438', '7439', '7440', '7441', '7442', '7443', '7444', '7445', '7447', '7448', '7449', '7450', '7451', '7452', '7453', '7454', '7456', '7457', '7458', '7459', '7460', '7461', '7462', '7463', '7464', '7465', '7466', '7467', '7468', '7469', '7470', '7471', '7472', '7473', '7474', '7475', '7476', '7477', '7478', '7479', '7480', '7481', '7482', '7483', '7484', '7485', '7486', '7487', '7489', '7490', '7491', '7492', '7493', '7494', '7495', '7496', '7498', '7499', '7500', '7501', '7502', '7503', '7504', '7505', '7506', '7507', '7508', '7509', '7510', '7511', '7512', '7514', '7515', '7516', '7518', '7519', '7520', '7521', '7522', '7523', '7524', '7525', '7527', '7528', '7529', '7530', '7531', '7532', '7533', '7534', '7535', '7536', '7537', '7538', '7539', '7540', '7541', '7542', '7543', '7544', '7545', '7546', '7547', '7548', '7549', '7552', '7553', '7554', '7555', '7556', '7557', '7558', '7559', '7560', '7562', '7563', '7564', '7565', '7566', '7567', '7568', '7569', '7571', '7572', '7574', '7575', '7576', '7577', '7578', '7579', '7580', '7581', '7582', '7583', '7584', '7585', '7586', '7587', '7588', '7589', '7590', '7591', '7592', '7593', '7594', '7596', '7597', '7598', '7600', '7601', '7602', '7603', '7605', '7606', '7607', '7608', '7609', '7610', '7611', '7612', '7613', '7614', '7615', '7616', '7617', '7618', '7620', '7621', '7622', '7623', '7624', '7625', '7626', '7627', '7628', '7629', '7631', '7632', '7633', '7635', '7636', '7637', '7638', '7640', '7641', '7643', '7644', '7645', '7646', '7647', '7648', '7649', '7650', '7651', '7654', '7655', '7659', '7660', '7661', '7662', '7663', '7664', '7665', '7666', '7667', '7668', '7669', '7670', '7671', '7672', '7674', '7675', '7677', '7678', '7679', '7681', '7682', '7683', '7684', '7685', '7686', '7687', '7688', '7689', '7690', '7691', '7692', '7693', '7694', '7695', '7696', '7697', '7698', '7699', '7700', '7701', '7702', '7703', '7704', '7705', '7706', '7708', '7709', '7710', '7712', '7713', '7714', '7715', '7716', '7717', '7718', '7719', '7720', '7721', '7722', '7723', '7724', '7725', '7726', '7727', '7728', '7729', '7730', '7732', '7733', '7734', '7735', '7736', '7738', '7739', '7740', '7741', '7743', '7744', '7746', '7747', '7748', '7749', '7750', '7753', '7754', '7755', '7756', '7757', '7758', '7759', '7760', '7762', '7763', '7765', '7766', '7767', '7768', '7770', '7771', '7773', '7774', '7776', '7777', '7778', '7779', '7780', '7781', '7782', '7783', '7784', '7785', '7786', '7787', '7788', '7789', '7791', '7792', '7793', '7795', '7796', '7798', '7799', '7800', '7801', '7802', '7803', '7804', '7805', '7806', '7808', '7809', '7810', '7811', '7813', '7814', '7815', '7816', '7818', '7819', '7820', '7821', '7822', '7823', '7824', '7825', '7826', '7827', '7828', '7829', '7830', '7831', '7832', '7833', '7834', '7837', '7838', '7840', '7841', '7842', '7843', '7844', '7845', '7846', '7847', '7848', '7849', '7850', '7851', '7852', '7853', '7854', '7855', '7856', '7857', '7858', '7859', '7861', '7862', '7864', '7865', '7866', '7867', '7868', '7870', '7871', '7872', '7873', '7874', '7875', '7876', '7877', '7879', '7881', '7882', '7883', '7884', '7885', '7886', '7887', '7889', '7890', '7891', '7892', '7893', '7894', '7895', '7896', '7897', '7899', '7900', '7901', '8203', '8324', '8327', '8329', '8384', '8487', '8493', '8504', '8671', '8805', '8823', '8829', '8830', '8831', '8840', '8841', '8846', '8857', '8859', '8861', '8875', '8880', '8909', '8944', '8945', '8955', '8956', '9037', '9071', '9088', '9093', '9095', '9097', '9099', '9108', '9109', '9114', '9115', '9118', '9120', '9123', '9124', '9126', '9132', '9133', '9135', '9138', '9142', '9144', '9145', '9191', '9282', '9343', '9388', '9552', '9554', '9557', '9644', '9645', '9668', '9941', '9943', '9944', '9946', '9953', '9954', '9955', '9959', '9962', '9972', '10000', '10004', '10016', '10017', '10023', '10024', '10026', '10027', '10034', '10035', '10038', '10039', '10042', '10055', '10091', '10092', '10094', '10097', '10101', '10104', '10107', '10109', '10234', '10239', '10273', '10277', '10290', '10292', '10294']
        self.del_dirs = []
    
    def delete(self):
        f = '[unmusic] utils.DeleteBad.delete'
        if not self.Success:
            sh.com.cancel(f)
            return
        gi.objs.get_progress().set_text(_('Delete folders'))
        gi.objs.progress.show()
        count = 0
        for i in range(len(self.del_dirs)):
            shown_path = sh.Text(self.del_dirs[i]).shorten (max_len = 40
                                                           ,FromEnd = True
                                                           ,ShowGap = True
                                                           )
            mes = _('Delete "{}"').format(shown_path)
            gi.objs.progress.set_text(mes)
            gi.objs.progress.update(i,len(self.del_dirs))
            # Avoid GUI freezing
            sh.objs.get_root().update()
            if sh.Directory(self.del_dirs[i]).delete():
                count += 1
        gi.objs.progress.close()
        mes = _('{}/{} folders have been deleted.')
        mes = mes.format(count,len(self.del_dirs))
        sh.objs.get_mes(f,mes).show_info()
    
    def get_sizes(self):
        f = '[unmusic] utils.DeleteBad.get_sizes'
        if not self.Success:
            sh.com.cancel(f)
            return
        local = lg.objs.get_default().ihome.add_share(_('local collection'))
        local = os.path.realpath(local)
        external = lg.objs.default.ihome.add_share(_('external collection'))
        external = os.path.realpath(external)
        mobile = lg.objs.default.ihome.add_share(_('mobile collection'))
        mobile = os.path.realpath(mobile)
        total_size = 0
        local_size = 0
        external_size = 0
        mobile_size = 0
        gi.objs.get_progress().set_text(_('Calculate space to be freed'))
        gi.objs.progress.show()
        for i in range(len(self.ids)):
            gi.objs.progress.update(i,len(self.ids))
            path = os.path.join(local,self.ids[i])
            if os.path.exists(path):
                local_size += sh.Directory(path).get_size()
                self.del_dirs.append(path)
            path = os.path.join(external,self.ids[i])
            if os.path.exists(path):
                external_size += sh.Directory(path).get_size()
                self.del_dirs.append(path)
            path = os.path.join(mobile,self.ids[i])
            if os.path.exists(path):
                mobile_size += sh.Directory(path).get_size()
                self.del_dirs.append(path)
        gi.objs.progress.close()
        total_size = local_size + external_size + mobile_size
        total_size = sh.com.get_human_size(total_size, True)
        local_size = sh.com.get_human_size(local_size, True)
        external_size = sh.com.get_human_size(external_size, True)
        mobile_size = sh.com.get_human_size(mobile_size, True)
        mes = []
        sub = _('Space to be freed:')
        mes.append(sub)
        sub = _('in total: {}').format(total_size)
        mes.append(sub)
        sub = _('external collection: {}').format(external_size)
        mes.append(sub)
        sub = _('local collection: {}').format(local_size)
        mes.append(sub)
        sub = _('mobile collection: {}').format(mobile_size)
        mes.append(sub)
        mes.append('')
        sub = _('Do you really want to continue?')
        mes.append(sub)
        self.Success = sh.objs.get_mes(f,'\n'.join(mes)).show_question()
        if not self.Success:
            mes = _('Operation has been canceled by the user.')
            sh.objs.get_mes(f, mes, True).show_info()
    
    def run(self):
        self.get_sizes()
        self.delete()



class Image:
    
    def __init__(self):
        self.dir = sh.Home('unmusic').add_share(_('Images'))
        self.Success = sh.Path(self.dir).create()
        self.path = ''
        self.albumid = 0
        self.bytes = None
        self.Present = False
        self.Processed = False
        self.Skipped = False
    
    def save(self):
        f = '[unmusic] utils.Image.save'
        if not self.Success:
            sh.com.cancel(f)
            return
        if not self.path:
            sh.com.rep_empty(f)
            return
        if os.path.exists(self.path):
            mes = _('File "{}" already exists.')
            mes = mes.format(self.path)
            sh.objs.get_mes(f, mes, True).show_debug()
            self.Present = True
        elif self.bytes:
            mes = _('Save "{}"').format(self.path)
            sh.objs.get_mes(f, mes, True).show_info()
            iimage = im.Image()
            iimage.bytes_ = self.bytes
            iimage.get_loader()
            iimage.convert2rgb()
            iimage.save(self.path,'JPEG')
            self.Processed = iimage.Success
        else:
            mes = _('Album {} has no cover!')
            mes = mes.format(self.albumid)
            sh.objs.get_mes(f, mes, True).show_debug()
            self.Skipped = True
    
    def set_path(self):
        f = '[unmusic] utils.Image.set_path'
        if not self.Success:
            sh.com.cancel(f)
            return
        name = str(self.albumid)
        if not name:
            sh.com.rep_empty(f)
            return
        name += '.jpg'
        self.path = os.path.join(self.dir, name)
    
    def reset(self, albumid, bytes_):
        self.path = ''
        self.albumid = albumid
        self.bytes = bytes_
        self.Present = False
        self.Processed = False
        self.Skipped = False
    
    def run(self):
        self.set_path()
        self.save()



class Commands:
    
    def __init__(self):
        self.path = '/home/pete/.config/unmusic/unmusic.db'
        self.clone = '/tmp/unmusic.db'
    
    def extract_images(self):
        f = '[unmusic] utils.Commands.extract_images'
        sh.GUI_MES = False
        idb = DB(self.path, self.clone)
        idb.connect()
        data = idb.fetch_images()
        if not data:
            sh.com.rep_empty(f)
            idb.close()
            return
        errors = 0
        present = 0
        processed = 0
        skipped = 0
        iimage = Image()
        for row in data:
            iimage.reset(row[0], row[1])
            iimage.run()
            if iimage.Present:
                present += 1
            elif iimage.Skipped:
                skipped += 1
            elif iimage.Processed:
                processed += 1
            else:
                errors += 1
        mes = _('Files in total: {}, processed: {}, already existing: {}, skipped: {}, errors: {}')
        mes = mes.format(len(data), processed, present, skipped, errors)
        sh.objs.get_mes(f, mes, True).show_info()
        idb.close()
    
    def alter(self):
        if os.path.exists(self.clone):
            sh.File(self.clone).delete()
        # Alter DB and add/remove some columns
        idb = DB (path = self.path
                 ,clone = self.clone
                 )
        idb.connect()
        idb.connectw()
        idb.fetch()
        idb.create_tables()
        idb.fill()
        idb.savew()
        idb.close()
        idb.closew()
        
    def is_camel_case(self, title):
        words = title.split(' ')
        for word in words:
            if word != word.upper() and len(word) > 1 \
            and word[0].isalpha():
                for sym in word[1:]:
                    if sym in 'ABCDEFGHIJKLMNOPQRSTUVWXYZАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЪЬЭЮЯ':
                        return True
    
    def show_cyphered(self):
        f = '[unmusic] utils.Commands.show_cyphered'
        if not lg.objs.get_db().Success:
            sh.com.cancel(f)
            return
        titles = []
        #query = 'select TITLE from TRACKS order by ALBUMID'
        query = 'select ALBUM from ALBUMS order by ALBUM'
        try:
            lg.objs.db.dbc.execute(query)
            titles = lg.objs.db.dbc.fetchall()
            if titles:
                titles = [item[0] for item in titles]
        except Exception as e:
            mes = _('Operation has failed!\n\nDetails: {}')
            mes = mes.format(e)
            sh.objs.get_mes(f,mes).show_warning()
        result = [title for title in titles \
                  if self.is_camel_case(title)
                 ]
        print('\n'.join(result))
        print(len(result))



class DB:
    
    def __init__(self, path, clone):
        self.albums = ()
        self.tracks = ()
        self.path = path
        self.clone = clone
        self.Success = self.clone and sh.File(self.path).Success
    
    def fetch_images(self):
        f = '[unmusic] utils.DB.fetch_images'
        if not self.Success:
            sh.com.cancel(f)
            return
        mes = _('Fetch data')
        sh.objs.get_mes(f, mes, True).show_debug()
        query = 'select ALBUMID,IMAGE from ALBUMS order by ALBUMID'
        try:
            self.dbc.execute(query)
            return self.dbc.fetchall()
        except Exception as e:
            self.fail(f, e)
    
    def create_tables(self):
        self.create_albums()
        self.create_tracks()
    
    def fetch(self):
        self.fetch_albums()
        self.fetch_tracks()
    
    def fail(self,f,e):
        self.Success = False
        mes = _('Database "{}" has failed!\n\nDetails: {}')
        mes = mes.format(self.path, e)
        sh.objs.get_mes(f,mes).show_warning()
    
    def fail_clone(self, f, e):
        self.Success = False
        mes = _('Database "{}" has failed!\n\nDetails: {}')
        mes = mes.format(self.clone, e)
        sh.objs.get_mes(f,mes).show_warning()
    
    def savew(self):
        f = '[unmusic] utils.DB.savew'
        if not self.Success:
            sh.com.cancel(f)
            return
        try:
            self.dbw.commit()
        except Exception as e:
            self.fail_clone(f, e)
        
    def connect(self):
        f = '[unmusic] utils.DB.connect'
        if not self.Success:
            sh.com.cancel(f)
            return
        try:
            self.db = sqlite3.connect(self.path)
            self.dbc = self.db.cursor()
        except Exception as e:
            self.fail(f, e)
                          
    def connectw(self):
        f = '[unmusic] utils.DB.connectw'
        if not self.Success:
            sh.com.cancel(f)
            return
        try:
            self.dbw = sqlite3.connect(self.clone)
            self.dbcw = self.dbw.cursor()
        except Exception as e:
            self.fail_clone(f, e)
    
    def fetch_albums(self):
        f = '[unmusic] utils.DB.fetch_albums'
        if not self.Success:
            sh.com.cancel(f)
            return
        mes = _('Fetch data from {}').format('ALBUMS')
        sh.objs.get_mes(f, mes, True).show_info()
        # 8 columns to fetch
        query = 'select ALBUMID, ALBUM, ARTIST, YEAR, GENRE, COUNTRY, COMMENT \
                ,SEARCH from ALBUMS'
        try:
            self.dbc.execute(query)
            self.albums = self.dbc.fetchall()
        except Exception as e:
            self.fail(f, e)
    
    def fetch_tracks(self):
        f = '[unmusic] utils.DB.fetch_tracks'
        if not self.Success:
            sh.com.cancel(f)
            return
        mes = _('Fetch data from {}').format('TRACKS')
        sh.objs.get_mes(f, mes, True).show_info()
        # 9 columns to fetch
        query = 'select ALBUMID, TITLE, NO, LYRICS, COMMENT, SEARCH, BITRATE \
                ,LENGTH, RATING from TRACKS'
        try:
            self.dbc.execute(query)
            self.tracks = self.dbc.fetchall()
        except Exception as e:
            self.fail(f, e)
    
    def create_albums(self):
        f = '[unmusic] utils.DB.create_albums'
        if not self.Success:
            sh.com.cancel(f)
            return
        # 9 columns by now
        query = 'create table ALBUMS (\
                 ALBUMID integer primary key autoincrement \
                ,ALBUM   text    \
                ,ARTIST  text    \
                ,YEAR    integer \
                ,GENRE   text    \
                ,COUNTRY text    \
                ,COMMENT text    \
                ,SEARCH  text    \
                ,RATING  float   \
                                     )'
        self._create_table(f, query)
    
    def _create_table(self, f, query):
        try:
            self.dbcw.execute(query)
        except Exception as e:
            self.fail_clone(f, e)
    
    def create_tracks(self):
        f = '[unmusic] utils.DB.create_tracks'
        if not self.Success:
            sh.com.cancel(f)
            return
        # 9 columns by now
        query = 'create table if not exists TRACKS (\
                 ALBUMID integer \
                ,TITLE   text    \
                ,NO      integer \
                ,LYRICS  text    \
                ,COMMENT text    \
                ,SEARCH  text    \
                ,BITRATE integer \
                ,LENGTH  integer \
                ,RATING  integer \
                                                   )'
        self._create_table(f, query)
    
    def _get_mean(self, ratings):
        if 0 in ratings:
            return 0
        else:
            return round(sum(ratings) / len(ratings))
    
    def _fill_albums(self):
        f = '[unmusic] utils.DB._fill_albums'
        query = 'insert into ALBUMS values (?, ?, ?, ?, ?, ?, ?, ?, ?)'
        for row in self.albums:
            lg.objs.get_db().albumid = row[0]
            ratings = lg.objs.db.get_rating()
            if ratings:
                rating = self._get_mean(ratings)
            else:
                rating = 0
                sh.com.rep_empty(f)
            mes = _('Album ID: {}. Rating: {}').format(row[0], rating)
            sh.objs.get_mes(f, mes, True).show_debug()
            row += (rating,)
            self._fill_row(f, query, row)
    
    def _fill_tracks(self):
        f = '[unmusic] utils.DB._fill_tracks'
        query = 'insert into TRACKS values (?, ?, ?, ?, ?, ?, ?, ?, ?)'
        for row in self.tracks:
            self._fill_row(f, query, row)
    
    def _fill_row(self, f, query, row):
        try:
            self.dbcw.execute(query, row)
        except Exception as e:
            self.Success = False
            self.fail(f, e)
            return
    
    def fill(self):
        f = '[unmusic] utils.DB.fill'
        if not self.Success:
            sh.com.cancel(f)
            return
        if not self.albums or not self.tracks:
            sh.com.rep_empty(f)
            return
        mes = _('Copy "{}" to "{}"').format(self.path, self.clone)
        sh.objs.get_mes(f, mes, True).show_info()
        self._fill_albums()
        self._fill_tracks()
                          
    def close(self):
        f = '[unmusic] utils.DB.close'
        if not self.Success:
            sh.com.cancel(f)
            return
        try:
            self.dbc.close()
        except Exception as e:
            self.fail(f, e)
                          
    def closew(self):
        f = '[unmusic] utils.DB.closew'
        if not self.Success:
            sh.com.cancel(f)
            return
        try:
            self.dbcw.close()
        except Exception as e:
            self.fail_clone(f, e)


com = Commands()


if __name__ == '__main__':
    f = '[unmusic] utils.__main__'
    sh.com.start()
    #com.alter()
    #DeleteBad().run()
    mes = _('Goodbye!')
    sh.objs.get_mes(f, mes, True).show_debug()
    sh.com.end()
